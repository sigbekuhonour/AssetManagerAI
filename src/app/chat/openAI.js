
import OpenAI from "openai/index.mjs";
import { supabase } from '@/lib/supabase'
import { generateText} from 'ai';
import { openai } from '@ai-sdk/openai';
import "dotenv/config";


export async function generateCompletion(message) {
  const fs = require('fs');
  if (!process.env.OPENAI_API_KEY) {
    console.error("No API key found in environment variables!");
    return;
  }

  try {
    //Messages with the assistant role are presumed to have been generated by the model,
    //perhaps in a previous generation request (see the "Conversations" section below).

    //add a messagse with the assistant role to serve as a prompt for the extracted text from the uploaded pdf


    ///check if supabase is empty or not
  const { data, error } = await supabase
  .storage
  .from('assets')
  .list("", {
    limit: 100,
    offset: 0,
    sortBy: { column: 'name', order: 'asc' },
  })
  if (error) {
    console.error('Error listing folder:', error.message);
    return error
  }
  else  if(!data || data.length === 0){
  console.log("Supabase storage contains no files");
  const openai = new OpenAI({ apiKey: `${process.env.OPENAI_API_KEY}` });
  const completion = await openai.chat.completions.create({
    model: "gpt-4o-mini",
    messages: [
      {
        role: "developer",
        content: [
          {
            type: "text",
            text: `
                You are a helpful assistant that answers programming questions 
                on Managing Engineering Assets.
              `,
          },
        ],
      },
      {
        role: "user",
        content: [
          {
            type: "text",
            text: `${message}`,
          },
        ],
      },
      {
        role: "assistant",
        content: [
          {
            type: "text",
            text: "Provide a concise and clear explanation while also providing supporting links to back up this information highlighted properly",
          },
        ],
      },
      {
        role: "user",
        content: [
          {
            type: "text",
            text: "Remove any asterik in generated response and replace them with paragraphed bullets",
          },
        ],
      },
    ],
  });
  //console.log(completion.choices[0].message.content);
  return completion.choices[0].message.content; //my res should be the entire completiton which is the json.

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  
}
//supabase contains files
else{
  console.log("Supabase storage contains files");
  const result = await generateText({
    model: openai('gpt-4o'),
    messages: [
      {
        role: 'user',
        content: [
          {
            type: 'text',
            text: `${message}`,
          },
          {
            type: 'file',
            data: fs.readFileSync("./public/assets.pdf"),
            mimeType: 'application/pdf',
            filename: 'assets.pdf', // optional
          },
        ],
      },
    ],
  });
  return result.text;
} 
}
catch (error) {
  console.log(error);
  //console.error("Error calling OpenAI API:", error);
  return "Oops, an error occurred try again later.";
}
}
